--Initial Thoughts----------------------------------------------------------------------------------------------------------------------

First things first was to read through the specifications a few times and write out a diagram of what's needed.

I need a frontend and backend.

The backend needs to have the following:
    - DB Model for Events, Tickets, and Users
        - Event model should have the following:
            Name - this will be what's displayed on the front end
            Date - of the event, also for display
            Initial # tickets - also for display
            Additional # tickets - not in the brief but would be useful to keep track
            Unique Identifier - GUID for passing around to uniquely identify the event
            Datetime created - Useful primarily for reporting as a possible extension, also debugging

        - Ticket model:
            Unique Identifier - Again GUID for passing around to uniquely identify the ticket. Ensure no clashes between guids of events and tickets?
            Is redeemed - Tickets have 2 statuses, "Ok" and "Redeemed", this can be a flag.
            Datetime created - useful again for reporting and debugging

        - User model:
            Username
            Hashed password
            Datetime created

    - API endpoints

        event/
            create/ - create an event and return it's GUID
            status/<eventIdentifier> - return total # tickets and # redeemed for event
            download/<eventIdentifier> - return file containing GUIDs of unredeemed tickets for the event
            add/<eventIdentifier> - also provided # new tickets to create for event

        ticket/
            redeem/<ticketIdentifier> - return confirmation or rejection based on status of ticket
                this should be exposed with no login required; it's assumed that if a user has the Identifier
                it's theirs to redeem.

            status/<ticketIdentifier> - return status of ticket

The frontend should be 4 pages
    
    - Login page

    - Events page: see a paginated and searchable list of events

    - Event page: page for displaying the details and status of the event (per status/ endpoint)

    - Ticket page: page for showing the status of an individual page. 
        Have the list of unredeemed tickets on an event, with the link to this page being here?


Series of actions:
    1. Create an API
    2. Have tests for it
    3. Create a front end for the api
    4. Have tests for frontend

------------------------------------------------------------------------------------------------------------------------

Change of plan, the specifications can be met by building a web app following
flasks tutorial and amending it as needed.

------------------------------------------------------------------------------------------------------------------------

Reread brief and see that what I was doing was not quite what was asked.

Reading around, there is a tutorial which talks about token based authentication.
The solution is understandable, so I will follow this, make some major changes accoridng to what
the tutorial is describing. There is a lot of example code, so I will use this as it's faster to 
make sure I understand and copy rather than write from scratch.

The main thing to make after this point is to get a single view which requires a token and have that
return the requested data. The easiest would be a list of all events.

Once the api has all the endpoints it needs, I then need to work on a frontend. 
I am familiar with plotly dash, that's easy enough to get up and running.

------------------------------------------------------------------------------------------------------------------------

For the dashboard, I will have a simple multi page app, the structure is the boilerplate given 
here https://dash.plotly.com/urls under the "Structuring a Multi-Page App" section.

I want the app to do the following:
    Authentication
    Display events,
    Display a single event,
        - Might have this as an element in the events list page, as the info is minimal, as opposed to separate page
    Display ticket

I need a global session storage to save tokens from the API.

I need the page routing to check the session for a token, check if it's still valid 
then if it is continue to requested page,
otherwise go to the login page

Also, once registered or logged in, I need to go to a home page straight away.

If a token becomes invalid whilst on a page, I should prompt/force the user to go to the login page.

If there's time, maybe retain some state of the last page visted, so on relogin I can take the user back to 
where they were. This sounds like playing with the session storage, and using that as an intermediary on all callbacks,
so the session gets all this info as token expiry is encountered. Unless dash now supports an element to exist in multiple outputs.